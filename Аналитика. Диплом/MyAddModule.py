# –¥–∞–Ω–Ω—ã–µ
import pandas as pd
import numpy as np
# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
from statsmodels.stats.stattools import medcouple
from statsmodels.stats.proportion import proportions_ztest
from scipy.stats import mannwhitneyu
from scipy.stats import shapiro
from scipy.stats import probplot
from scipy.stats import norm
# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
import matplotlib.pyplot as plt
import seaborn as sns
# –ø—Ä–æ—á–∏–µ —É–¥–æ–±—Å—Ç–≤–∞
import re
from collections import namedtuple
import inspect
# colors
#731982 - purple
#00b956 - green



# —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
def fix_q1(answer: str) -> str:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ 1–π –≤–æ–ø—Ä–æ—Å.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —á–∏—Å–ª–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞. 
    –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏ –æ–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ—Ç—Ä–µ–∑–∫–∞ [1, 10], –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞ –æ—Ç–≤–µ—Ç –ª–∏–±–æ 1 –ª–∏–±–æ 10.
    –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –∏ –≤—Å–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç 10, –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏
    –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, NumPy, re.
    
    Parameters
    ----------
    answer : str
        –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–º–∞.
    
    Returns
    -------
    : str
        –°—Ç—Ä–æ–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–æ–º. 
    """
    if not pd.isna(answer):
        tmp = re.compile(r'\d+').findall(answer)
        if len(tmp) != 0:
            tmp = list(map(int, tmp))
            if len(tmp) == 1:

                if tmp[0] > 10:
                    return '10'
                elif tmp[0] < 1:
                    return '1'
                else:
                    return str(tmp[0])

            elif len(tmp) > 1 and all([i <= 10 for i in tmp]):
                return np.mean(tmp).round().astype(int).astype(str)
            else:
                return answer
        else:
            return answer


# —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
def fix_q2(answer: str) -> (list, str):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ 2–π –≤–æ–ø—Ä–æ—Å.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ü–∏—Ñ—Ä—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ [1, 7].
    –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫.
    –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–º–µ—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, NumPy, re.

    Parameters
    ----------
    answer : str
        –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–º–∞.

    Returns
    -------
    : list of strings, str
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ 'NaN'.
    """
    correct_q2 = np.arange(1, 8).astype(str)
    if not pd.isna(answer):
        tmp = np.array([elem for elem in re.compile(r'\d').findall(answer) if elem in correct_q2])
        return np.unique(tmp).tolist()

    return 'NaN'


# —Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ pandas.DataFrame.describe
# –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é, –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25%-75%), —ç–∫—Å—Ü–µ—Å—Å –∏ –∞—Å—Å–∏–º–µ—Ç—Ä–∏—é
def my_describe(dataframe):
    """
    –î–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ pandas.DataFrame.describe.
    –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é, –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25%-75%), —ç–∫—Å—Ü–µ—Å—Å –∏ –∞—Å—Å–∏–º–µ—Ç—Ä–∏—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫—É Pandas.

    Parameters
    ----------
    dataframe : DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–º.

    Returns
    -------
    result : Series or DataFrame
        –°—É–º–º–∞—Ä–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    result = dataframe.describe()  # –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
    result.loc['variance'] = dataframe.var().apply(lambda x: format(x, 'f')).values  # –¥–∏—Å–ø–µ—Ä—Å–∏—è
    result.loc['IQR'] = (result.loc['75%'] - result.loc['25%']).values  # –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    result.loc['kurtosis'] = dataframe.kurtosis().values  # —ç–∫—Å—Ü–µ—Å—Å
    result.loc['skew'] = dataframe.skew().values  # –∞—Å—Å–∏–º–µ—Ç—Ä–∏—è
    return result


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def normality_visual_test(dataframe, column, bins='auto'):
    """
    –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –≤—ã–±—Ä–æ—Å–æ–≤. 
    –ö—Ä–∏—Ç–µ—Ä–∏–π –®–∞–ø–∏—Ä–æ‚Äî–£–∏–ª–∫–∞ + QQ-plot (scipy.stats.shapiro, scipy.stats.probplot).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ scipy, seaborn.
    
    Parameters
    ----------
    dataframe : DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö.
    column : label
        –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥—É–µ–º–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–∞–Ω–Ω—ã—Ö.
    bins : int or 'auto', default 'auto'
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'auto' (–∫–∞–∫ –≤ sns.histplot).
    
    Returns
    -------
    fig : Figure
        –§–∏–≥—É—Ä–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    """
    # —Å—Ç–∏–ª—å
    sns.set_style('darkgrid', {'axes.facecolor': 'whitesmoke'})
    # —Ñ–∏–≥—É—Ä–∞ —Å —Ç—Ä–µ–º—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(30, 8))
    # –≤—ã–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    tst = dataframe[column]
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–≥—É—Ä—ã
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ' + column, y=1.25, fontsize=34)
    # —Ç–µ–∫—Å—Ç –∫–∞–∫ —á–∞—Å—Ç—å —Ñ–∏–≥—É—Ä—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –®–∞–ø–∏—Ä–æ
    stat, pval = shapiro(tst)
    plt.figtext(0.12, 1,
                '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –®–∞–ø–∏—Ä–æ‚Äî–£–∏–ª–∫–∞:\nstatistic={}\npvalue={}\nNormal distribution: {}'\
                .format(stat, pval, 'no' if pval < 0.05 else 'yes'),
                fontsize=26)

    # QQ-plot —Ç–µ—Å—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    probplot(tst, plot=axes[0])
    axes[0].set_title('qq.plot-—Ç–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', fontsize=20)
    axes[0].get_lines()[0].set_color('darkgreen')
    axes[0].get_lines()[0].set_markerfacecolor('#00b956')
    axes[0].get_lines()[0].set_markersize(10)
    axes[0].xaxis.label.set_size(14)
    axes[0].yaxis.label.set_size(14)

    # –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫
    axes[1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ª–∏–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–µ–π', fontsize=20)
    sns.histplot(tst, bins=bins, ax=axes[1], color='#00b956', kde=True, alpha=1)

    # 25–π, 50–π, 75–π, 99–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏
    axes[1].axvline(x=np.percentile(tst, 25), color='gold', linestyle='--', label='25%')
    axes[1].axvline(x=np.percentile(tst, 50), color='blue', linestyle='-.', label='50%')
    axes[1].axvline(x=np.percentile(tst, 75), color='gold', linestyle='--', label='75%')
    axes[1].axvline(x=np.percentile(tst, 99), color='black', linestyle='-', label='99%')
    axes[1].axvline(x=tst.mean(), color='red', linestyle='-', label='–°—Ä–µ–¥–Ω–µ–µ')
    axes[1].legend(fontsize=16)
    axes[1].xaxis.label.set_size(14)
    axes[1].yaxis.label.set_size(14)

    # boxplot –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫
    axes[2].set_title('Boxplot', fontsize=20)
    sns.boxplot(x=tst, ax=axes[2], color='#00b956', saturation=1)
    axes[2].set_xlabel(column, fontsize=14)

    plt.show()
    return fig


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
def adj_boxplot_outliers(dataframe, columns, min_perc=25, max_perc=75, way='both'):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –∫–≤–∞–Ω—Ç–∏–ª—è–º. –ú–∞—Ä–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏ (1 - –≤—ã–±—Ä–æ—Å, 0 - –Ω–æ—Ä–º–∞).
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –∑–∞ –¥–≤—É–º—è –∫–≤–∞—Ä—Ç–∏–ª—è–º–∏ (25–π –∏ 75–π –∫–≤–∞–Ω—Ç–∏–ª–∏).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, NumPy –∏ statsmodels.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ 'An Adjusted Boxplot for Skewed Distributions' –¥–ª—è —Å–º–µ—â–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π:
    ùëÑ1-exp(‚àí4ùëÄ)1.5*IQR and ùëÑ3+exp(3ùëÄ)1.5*IQR, if ùëÄ‚â•0
    ùëÑ1-exp(‚àí3ùëÄ)1.5*IQR and ùëÑ3+exp(4ùëÄ)1.5*IQR, if ùëÄ<0
    –≥–¥–µ –ú - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏ (statsmodels.stats.stattools.medcouple)
    
    –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Ç–æ–º —á–∏—Å–ª–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, 
    –ø–æ—Å–∫–æ–ª—å–∫—É –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ M‚âà0 –∏ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–∫–≤–∞–Ω—Ç–∏–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ.
    
    Parameters
    ----------
    dataframe : DataFrame
        –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤.
    columns : list of labels
        –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
    min_perc : number, int or float, default 25
        –ù–∏–∂–Ω–∏–π –∫–≤–∞–Ω—Ç–∏–ª—å (–ø—Ä–æ—Ü–µ–Ω—Ç, –æ—Ç 0 –¥–æ 100).
    max_perc : number, int or float, default 75
        –í–µ—Ä—Ö–Ω–∏–π –∫–≤–∞–Ω—Ç–∏–ª—å (–ø—Ä–æ—Ü–µ–Ω—Ç, –æ—Ç 0 –¥–æ 100).
    way : string, 'left', 'right' or 'both', default 'both'
        –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤: 
        'left' - —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ –≥—Ä–∞–Ω–∏—Ü—ã min_perc, 
        'right' - —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ –≥—Ä–∞–Ω–∏—Ü—ã max_perc, 
        'both' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –≤—Å–µ –≤—ã–±—Ä–æ—Å—ã –∑–∞ –æ–±–µ–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    
    Returns
    -------
    res_frame : DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö, 
        –∞ —Ç–∞–∫–∂–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö (–≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏).
    """
    # –¥–µ–ª–∞–µ–º –∫–æ–ø–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    res_frame = dataframe.copy()
    # —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –º–∞—Ä–∫–µ—Ä–æ–º –≤—ã–±—Ä–æ—Å–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –º–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ
    res_frame['outliers'] = 0
    # –º–∞—Å–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–∞—Ä–∫–µ—Ä–∞ –≤—ã–±—Ä–æ—Å–æ–≤
    outliers = set()

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É –¥–∞–Ω–Ω—ã—Ö
    for col in columns:
        # –Ω–∏–∂–Ω–∏–π –∫–≤–∞–Ω—Ç–∏–ª—å
        q1 = res_frame[col].quantile(q=min_perc / 100)
        # –≤–µ—Ä—Ö–Ω–∏–π –∫–≤–∞–Ω—Ç–∏–ª—å
        q3 = res_frame[col].quantile(q=max_perc / 100)
        # –º–µ–∂–∫–≤–∞–Ω—Ç–∏–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        iqr = q3 - q1
        # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏
        m = medcouple(res_frame[col])

        # –≤–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ –º–µ—Ç–æ–¥—É Adjusted Boxplot
        if m >= 0:
            lower_lim = q1 - np.exp(-4 * m) * 1.5 * iqr
            upper_lim = q3 + np.exp(3 * m) * 1.5 * iqr
        else:
            lower_lim = q1 - np.exp(-3 * m) * 1.5 * iqr
            upper_lim = q3 + np.exp(4 * m) * 1.5 * iqr

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Å–∫—É-–º–∞—Ä–∫–∏—Ä–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        if way == 'both':
            outliers = outliers | set(res_frame[(res_frame[col] < lower_lim) |
                                                (res_frame[col] > upper_lim)].index)
        if way == 'left':
            outliers = outliers | set(res_frame[(res_frame[col] < lower_lim)].index)
        if way == 'right':
            outliers = outliers | set(res_frame[(res_frame[col] > upper_lim)].index)

    # –∑–Ω–∞—á–µ–Ω–∏—è —Å –≤—ã–±—Ä–æ—Å–∞–º–∏ –ø–µ—Ä–µ–º–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –≤—ã–±—Ä–æ—Å—ã
    res_frame.loc[res_frame.index.isin(outliers), 'outliers'] = 1
    print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤: {}'.format(res_frame.index.isin(outliers).sum()))
    return res_frame


# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –º–µ–¥–∏–∞–Ω—ã –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
def mean_median_comparison(dataframe, columns, grouper, visual=False):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –º–µ–¥–∏–∞–Ω—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞.
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É grouper, —Å—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, seaborn.

    Parameters
    ----------
    dataframe : DataFrame
        –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º.
    columns : list of labels
        –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
    grouper : string
        –°—Ç–æ–ª–±–µ—Ü-–ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–π–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø—ã.
    visual : bool, default False
        –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫ –Ω–µ —Ä–∏—Å—É–µ—Ç—Å—è.

    Returns
    -------
    res_frame : DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å—Ä–µ–¥–µ–Ω–≥–æ –∏ –º–µ–¥–∏–∞–Ω—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É.
    fig : Figure
        –§–∏–≥—É—Ä–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏. –ï—Å–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.
    """
    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    test_calc = dataframe[columns + [grouper]].groupby(grouper).agg(['mean', 'median']).stack()
    test_calc.index.set_names('statistic', level=1, inplace=True)
    test_calc.reset_index(inplace=True)
    # –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç —Ñ–ª–∞–≥, —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    if visual:
        fig, axes = plt.subplots(nrows=len(columns), ncols=1, figsize=(8, 20))
        fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∏ –º–µ–¥–∏–∞–Ω –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', fontsize=18, y=1)
        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        for i, param in enumerate(columns):
            # —Å—Ç—Ä–æ–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫
            sns.barplot(data=test_calc, x=param, y='statistic', hue=grouper,
                        palette=['#00b956', '#731982'], ax=axes[i], alpha=1, saturation=1)
            # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            axes[i].set(xlabel=None, ylabel=None)
            handles, _ = axes[i].get_legend_handles_labels()
            axes[i].set_title(label=param, fontsize=16)
            axes[i].legend_.remove()
            axes[i].tick_params(labelsize=12)
        # –æ–±—â–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞
        fig.tight_layout()
        fig.legend(handles, ['–ì—Ä—É–ø–ø–∞ 0', '–ì—Ä—É–ø–ø–∞ 1'], fontsize=12,
                   title='–ì—Ä—É–ø–ø–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤', title_fontsize=16,
                   loc='upper right', bbox_to_anchor=(1.3, 1))
        plt.show()

    return test_calc, fig


def mannwhitney_test(dataframe, columns, splitter, p_value=0.05):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –ú–∞–Ω–Ω–∞-–£–∏—Ç–Ω–∏: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π 
    –≤ –¥–≤—É—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö. –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 
    —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. –î–µ–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é splitter –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, scipy.
    
    Parameters
    ----------
    dataframe : DataFrame
        –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º.
    columns : list of labels
        –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ (—Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏).
    splitter : string
        –°—Ç–æ–ª–±–µ—Ü-–ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–π–Ω–∏–π –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã.
    p_value : number, float, default 0.05
        –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%.
    
    Returns
    -------
    result : DataFrame
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    """
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
    if dataframe[splitter].nunique() != 2:
        raise ValueError('–î–æ–ª–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è –¥–≤–µ –≥—Ä—É–ø–ø—ã!')

    # —à–∞–±–ª–æ–Ω —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É–µ—â–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    result = pd.DataFrame(columns=['U-statistic', 'p_value', 'significant_difference'],
                          index=columns)

    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
    for col in columns:
        # –¥–µ–ª–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–ø–ø—ã
        x = dataframe.loc[dataframe[splitter] == dataframe[splitter].unique()[0]][col]
        y = dataframe.loc[dataframe[splitter] == dataframe[splitter].unique()[1]][col]
        # —Ç–µ—Å—Ç–∏—Ä—É–µ–º
        test_res = mannwhitneyu(x, y)
        # –ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.loc[col, 'U-statistic'] = test_res[0]
        result.loc[col, 'p_value'] = test_res[1]
        result.loc[col, 'significant_difference'] = 'yes' if (result.loc[col, 'p_value'] < 0.05) else 'no'

    # –≤—ã–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä—ã –¥–≤—É—Ö –≥—Ä—É–ø–ø
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ '{}': {}".format(dataframe[splitter].unique()[0], x.size))
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ '{}': {}".format(dataframe[splitter].unique()[1], y.size))
    return result


# –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def var_name_print(var):
    callers_local_vars = inspect.currentframe().f_back.f_back.f_locals.items()
    return [var_name for var_name, var_val in callers_local_vars if var_val is var][0]


# –±—É—Ç—Å—Ç—Ä—ç–ø
def bootstrap(group_1, group_2, output, statistic=np.mean, n_resamples=10000, confidence_level=0.95):
    """
    –§—É–Ω–∫—Ü–∏—è –±—É—Ç—Å—Ç—Ä—ç–ø –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, NumPy, scipy.

    Parameters
    ----------
    group_1 : Series
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã.
    group_2 : Series
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã.
    output : list of labels, array-like
        –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    statistic : callable, function, default numpy.mean
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.
    n_resamples : number, int, default 10000
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –±—É—Ç—Å—Ç—Ä—ç–ø–∞.
    confidence_level : number, float, default 0.05
        –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 95%.

    Returns
    -------
    boot_result : Series
        –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É—Ç—Å—Ç—Ä—ç–ø–∞ –≤ –≤–∏–¥–µ —Å–µ—Ä–∏–∏, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π,
        –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ output.
    """
    # —à–∞–±–ª–æ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    boot_result = pd.Series(index=output, dtype=np.float64)
    # –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏
    sample_size = max(len(group_1), len(group_2))
    # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    boot_data = list()

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
    for _ in range(n_resamples):
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –¥–µ–ª–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥–≤—ã–±–æ—Ä–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏
        sample_1 = group_1.sample(sample_size, replace=True).values
        sample_2 = group_2.sample(sample_size, replace=True).values
        # —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –ø–æ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        boot_data.append(statistic(sample_1) - statistic(sample_2))

    # —Å—á–∏—Ç–∞–µ–º –∫–≤–∞–Ω—Ç–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    # —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ 5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ø–æ–ª–∞–º
    l_quantile = (1 - confidence_level) / 2
    r_quantile = 1 - (1 - confidence_level) / 2
    quantiles = pd.Series(boot_data).quantile([l_quantile, r_quantile])

    # p-value
    p_1 = norm.cdf(x=0, loc=np.mean(boot_data), scale=np.std(boot_data))
    p_2 = norm.cdf(x=0, loc=-np.mean(boot_data), scale=np.std(boot_data))
    p_value = min(p_1, p_2) * 2

    # –ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    boot_result['statistic'] = statistic.__name__  # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    boot_result['confidence_level'] = confidence_level  # –∑–∞–¥–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è
    boot_result['quantiles'] = [round(l_quantile, 4), round(r_quantile, 4)]  # –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    boot_result['group1_statistic'] = statistic(group_1)  # —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
    boot_result['group2_statistic'] = statistic(group_2)  # —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
    boot_result['difference'] = (statistic(group_1) - statistic(group_2))  # —Ä–∞–∑–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Ç—Å—Ç–∏–∫
    boot_result['confidence_interval'] = list(round(quantiles, 5))  # –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    # —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ–µ p-value –∏ —Ñ–ª–∞–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    boot_result['pval_H0'] = p_value
    boot_result['significant_diff'] = 'yes' if (boot_result['pval_H0'] < (1 - confidence_level)) else 'no'

    # –¥–∞–Ω–Ω—ã–µ, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –±—É—Ç—Å—Ç—Ä—ç–ø–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å—á–∏—Ç–∞–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    boot_result['boot_sample'] = boot_data

    return boot_result


# –±—É—Ç—Å—Ç—Ä—ç–ø-–ø–∞–∫–µ—Ç
def bootstrap_package(dataset_1, dataset_2, columns, statistic=np.mean, n_resamples=10000, confidence_level=0.95):
    """
    –§—É–Ω–∫—Ü–∏—è –±—É—Ç—Å—Ç—Ä—ç–ø.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, NumPy, collections.

    Parameters
    ----------
    dataset_1 : DataFrame
        –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º. –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
    dataset_2 : DataFrame
        –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º. –î–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
    columns : list of labels, array-like
        –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ (—Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏).
    statistic : callable, function, default numpy.mean
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.
    n_resamples : number, int, default 10000
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –±—É—Ç—Å—Ç—Ä—ç–ø–∞.
    confidence_level : number, float, default 0.05
        –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 95%.

    Returns
    -------
    boot_result : BootstrapResult
        –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É—Ç—Å—Ç—Ä—ç–ø–∞ –≤ –≤–∏–¥–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
        An object with attributes:
        summary : DataFrame
            –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
        bootstrap_data : Series
            –î–∞–Ω–Ω—ã–µ, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –±—É—Ç—Å—Ç—Ä—ç–ø–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–æ—Ä–¥–∏–ª–∏—Å—å —Ä–∞—Å—Å—á–µ—Ç—ã.
    """
    # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    BootstrapResult = namedtuple('BootstrapResult', ['summary', 'bootstrap_data'])
    # —à–∞–±–ª–æ–Ω
    result = pd.DataFrame(columns=['significant_diff',
                                   'statistic',
                                   'confidence_level',
                                   'quantiles',
                                   'group1_statistic',
                                   'group2_statistic',
                                   'difference',
                                   'confidence_interval',
                                   'pval_H0',
                                   'boot_sample'],
                          index=columns)

    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
    for column in columns:
        # –¥–µ–ª–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–ø–ø—ã
        group_1 = dataset_1[column]
        group_2 = dataset_2[column]
        # —Å—á–∏—Ç–∞–µ–º
        temp = bootstrap(group_1=group_1,
                         group_2=group_2,
                         output=result.columns,
                         statistic=statistic,
                         n_resamples=n_resamples,
                         confidence_level=confidence_level)
        # –ø–∏—à–µ–º —Ä–∞—Å—Å—á–µ—Ç—ã –≤ —à–∞–±–ª–æ–Ω —Å—Ç—Ä–æ–∫–∞–º–∏
        result.loc[column, :] = temp

    print('Bootstrap results for null hypothesis: statistics in the group_1 and group_2 are equal')
    return BootstrapResult(summary=result.loc[:, ~result.columns.isin(['boot_sample'])],
                           bootstrap_data=result['boot_sample'])


# —Ä–∏—Å—É–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –¥–æ–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ Q2 –≤ –¥–≤—É—Ö –≥—Ä—É–ø–ø–∞—Ö
def q2_reasons_visual_prop(group1, group2):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ Q2 –≤ –¥–≤—É—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.
    –í –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ –ø–æ—Å—á–∏—Ç–∞–Ω—ã –∞–±–æ–Ω–µ–Ω—Ç—ã, —É–∫–∞–∑–∞–≤—à–∏–µ –æ–±–µ –ø—Ä–∏—á–∏–Ω—ã,
    –≤–æ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ - –∞–±–æ–Ω–µ–Ω—Ç—ã, —É–∫–∞–∑–∞–≤—à–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø—Ä–∏—á–∏–Ω—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, Seaborn.

    Parameters
    ----------
    group1 : Series
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–±–æ–Ω–µ–Ω—Ç–æ–≤.
    group2 : Series
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–±–æ–Ω–µ–Ω—Ç–æ–≤.

    Returns
    -------
    fig : Figure
        –§–∏–≥—É—Ä–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏.
     """
    fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(16, 4), sharex=True)
    # –¥–æ–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ
    sns.barplot(x=group1.values / (group1.values + group2.values) * 100,
                y=group1.index,
                ax=axes[0],
                palette=['#00b956', '#731982'], alpha=0.9, saturation=1)
    # –¥–æ–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ
    sns.barplot(x=group2.values / (group1.values + group2.values) * 100,
                y=group2.index,
                ax=axes[1],
                palette=['#00b956', '#731982'], alpha=0.9, saturation=1)
    # –ø–æ–¥–ø–∏—Å–∏
    fig.supxlabel('% –æ—Ç–≤–µ—Ç–æ–≤')
    fig.supylabel('–ì—Ä—É–ø–ø—ã –ø—Ä–∏—á–∏–Ω', x=0)
    plt.show()

    return fig


# z-—Ç–µ—Å—Ç –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–æ–ª–µ–π –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –¥–≤—É—Ö –≥—Ä—É–ø–ø–∞—Ö (–¥–ª—è Q2).
def z_test(group1, group2, p_value=0.05):
    """
    –¢–µ—Å—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –¥–æ–ª–µ–π –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –¥–≤—É—Ö –≤—ã–±–æ—Ä–∫–∞—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ Pandas, NumPy, statsmodels.

    Parameters
    ----------
    group1 : Series
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã.
    group2 : Series
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã.
    p_value : number, float, default 0.05
        –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%.

    Returns
    -------
    result : DataFrame
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞.
    """
    # —à–∞–±–ª–æ–Ω —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É–µ—â–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    result = pd.DataFrame(columns=['Z-statistic', 'p_value', 'p_value < {}'.format(p_value)],
                          index=['value'])
    # —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–∏
    count = np.array((group1[1], group2[1]))
    # –≤—Å–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    nobs = np.array((group1.sum(), group2.sum()))
    # —Ç–µ—Å—Ç
    stat, pval = proportions_ztest(count, nobs)
    # –ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result['Z-statistic'] = stat
    result['p_value'] = pval
    result.iloc[:, 2] = result['p_value'] < p_value

    return result
